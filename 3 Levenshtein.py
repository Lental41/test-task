'''
3. Расстояние редактирования

*) это минимальное количество вставок, удалений и замен символов, необходимое для преобразования строки A в B. Данное число называется расстоянием редактирования или расстоянием Левенштейна.

- Напишите функцию для вычисления расстояния редактирования двух данных непустых строк содержащих строчные буквы латинского алфавита.
'''

def levenshtein_distance(str1: str, str2: str):
    matrix = [[0] * (len(str2) + 1) for k in range(len(str1) + 1)] # Создаем и заполняем матрицу для алгоритма Вагнера — Фишера
    for i in range(len(str1) + 1):
        matrix[i][0] = i
    for j in range(len(str2) + 1):
        matrix[0][j] = j

    for i in range(1, len(str1) + 1): # Вычисляем минимальное количество операций для каждой пары символов
        for j in range(1, len(str2) + 1):
            if str1[i - 1] == str2[j - 1]:
                count = 0
            else:
                count = 1
            matrix[i][j] = min(
                matrix[i - 1][j] + 1,        # удаление
                matrix[i][j - 1] + 1,        # вставка
                matrix[i - 1][j - 1] + count # замена
            )
    return matrix[len(str1)][len(str2)] # Результат находится в правом нижнем углу матрицы

str1 = input()
str2 = input()
print(f"Расстояние редактирования между '{str1}' и '{str2}': {levenshtein_distance(str1, str2)}")
